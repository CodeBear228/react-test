{"version":3,"sources":["components/Test/Test.js","serviceWorker.js"],"names":["Test","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCelsiusChange","bind","assertThisInitialized","handleFahrenheitChange","state","temperature","scale","setState","celsius","tryConvert","toCelsius","fahrenheit","toFahrenheit","react","Test_TemperatureInput","onTemperatureChange","BoilingVerdict","parseFloat","React","TemperatureInput","_this2","handleChange","e","target","value","scaleNames","onChange","convert","input","Number","isNaN","output","Math","round","toString","c","f","ReactDOM","render","Test_Test","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAGMA,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,oBAAsBP,EAAKO,oBAAoBC,KAAzBP,OAAAQ,EAAA,EAAAR,CAAAD,IAC3BA,EAAKU,uBAAyBV,EAAKU,uBAAuBF,KAA5BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC9BA,EAAKW,MAAQ,CAACC,YAAa,GAAIC,MAAO,KAJvBb,mFAOCY,GAChBT,KAAKW,SAAS,CAACD,MAAO,IAAKD,+DAGRA,GACnBT,KAAKW,SAAS,CAACD,MAAO,IAAKD,iDAI3B,IAAMC,EAAQV,KAAKQ,MAAME,MACnBD,EAAcT,KAAKQ,MAAMC,YACzBG,EAAoB,MAAVF,EAAgBG,EAAWJ,EAAaK,GAAaL,EAC/DM,EAAuB,MAAVL,EAAgBG,EAAWJ,EAAaO,GAAgBP,EAE3E,OACIQ,EAAA,yBACIA,EAAA,cAACC,EAAD,CAAkBR,MAAM,IAAID,YAAaG,EAASO,oBAAqBnB,KAAKI,sBAC5Ea,EAAA,cAACC,EAAD,CAAkBR,MAAM,IAAID,YAAaM,EAAYI,oBAAqBnB,KAAKO,yBAC/EU,EAAA,cAACG,EAAD,CAAgBR,QAASS,WAAWT,aA1BjCU,aAiCbC,cACF,SAAAA,EAAY3B,GAAO,IAAA4B,EAAA,OAAA1B,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACfC,EAAA1B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,KAAAH,KAAMJ,KACD6B,aAAeD,EAAKC,aAAapB,KAAlBP,OAAAQ,EAAA,EAAAR,CAAA0B,IAFLA,4EAKNE,GACT1B,KAAKJ,MAAMuB,oBAAoBO,EAAEC,OAAOC,wCAIxC,IAAMnB,EAAcT,KAAKJ,MAAMa,YACzBC,EAAQV,KAAKJ,MAAMc,MACzB,OACIO,EAAA,8BACIA,EAAA,oDAA8BY,EAAWnB,GAAzC,KACAO,EAAA,uBAAOW,MAAOnB,EACPqB,SAAU9B,KAAKyB,uBAjBPH,aAuB/B,SAASF,EAAexB,GACpB,OAAIA,EAAMgB,SAAW,IACVK,EAAA,gDAEJA,EAAA,oDAGX,SAASH,EAAUC,GACf,OAA2B,GAAnBA,EAAa,IAAU,EAGnC,SAASC,EAAaJ,GAClB,OAAkB,EAAVA,EAAc,EAAK,GAG/B,SAASC,EAAWJ,EAAasB,GAC7B,IAAMC,EAAQX,WAAWZ,GACzB,GAAIwB,OAAOC,MAAMF,GACb,MAAO,GAEX,IAAMG,EAASJ,EAAQC,GAEvB,OADgBI,KAAKC,MAAe,IAATF,GAAiB,KAC7BG,WAGnB,IAAMT,EAAa,CACfU,EAAG,UACHC,EAAG,cAGPC,IAASC,OACLzB,EAAA,cAAC0B,EAAD,MACAC,SAASC,eAAe,UC/ERC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA+GA,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4a91f93a.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass Test extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\r\n        this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\r\n        this.state = {temperature: '', scale: 'c'};\r\n    }\r\n\r\n    handleCelsiusChange(temperature) {\r\n        this.setState({scale: 'c', temperature});\r\n    }\r\n\r\n    handleFahrenheitChange(temperature) {\r\n        this.setState({scale: 'f', temperature});\r\n    }\r\n\r\n    render() {\r\n        const scale = this.state.scale;\r\n        const temperature = this.state.temperature;\r\n        const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\r\n        const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\r\n\r\n        return (\r\n            <div>\r\n                <TemperatureInput scale=\"c\" temperature={celsius} onTemperatureChange={this.handleCelsiusChange}/>\r\n                <TemperatureInput scale=\"f\" temperature={fahrenheit} onTemperatureChange={this.handleFahrenheitChange}/>\r\n                <BoilingVerdict celsius={parseFloat(celsius)} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass TemperatureInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.props.onTemperatureChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const temperature = this.props.temperature;\r\n        const scale = this.props.scale;\r\n        return (\r\n            <fieldset>\r\n                <legend>Enter temperature in {scaleNames[scale]}:</legend>\r\n                <input value={temperature}\r\n                       onChange={this.handleChange} />\r\n            </fieldset>\r\n        );\r\n    }\r\n}\r\n\r\nfunction BoilingVerdict(props) {\r\n    if (props.celsius >= 100) {\r\n        return <p>The water would boil.</p>;\r\n    }\r\n    return <p>The water would not boil.</p>;\r\n}\r\n\r\nfunction toCelsius(fahrenheit) {\r\n    return (fahrenheit - 32) * 5 / 9;\r\n}\r\n\r\nfunction toFahrenheit(celsius) {\r\n    return (celsius * 9 / 5) + 32;\r\n}\r\n\r\nfunction tryConvert(temperature, convert) {\r\n    const input = parseFloat(temperature);\r\n    if (Number.isNaN(input)) {\r\n        return '';\r\n    }\r\n    const output = convert(input);\r\n    const rounded = Math.round(output * 1000) / 1000;\r\n    return rounded.toString();\r\n}\r\n\r\nconst scaleNames = {\r\n    c: 'Celsius',\r\n    f: 'Fahrenheit'\r\n};\r\n\r\nReactDOM.render(\r\n    <Test/>,\r\n    document.getElementById('test1')\r\n);\r\n\r\nexport default Test;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}